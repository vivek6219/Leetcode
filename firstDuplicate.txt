//BRUTEFORCE SOLUTION O(N^2)
int firstDuplicate(int[] a) {

    int minIndex=a.length;
    for(int i =0; i<=a.length; i++){
        for(int j=i+1; j<a.length; j++){
            if(a[i]==a[j])
            {
                if(j<minIndex)
                    minIndex = j;
            }
            //[2, 1, 3, 5, 3, 2]
            //min = 5
        }
    }
    if(minIndex==a.length)
        return -1;    
        
    return a[minIndex];


}




//optimized solution using hashset o(n)

int firstDuplicate(int[] a) {
    HashSet<Integer> hs = new HashSet<>();
    int lastOccur=-1;
    for(int i =0; i<a.length; i++){
        if(!hs.contains(a[i])){
            hs.add(a[i]);
        }
        else{
            return a[i];
        }
    }
    
    return lastOccur;

}
