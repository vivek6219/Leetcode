//brute force solution
class Solution {
    public int[] productExceptSelf(int[] nums) {
        //brute force solution would be just to have two pointers, youre going to multiply each value
        
        int res[] = new int[nums.length];
        int temp=1;
        for(int i =0; i<nums.length; i++){
            for(int j=0; j<nums.length; j++){
                if(i!=j)
                {
                    temp*=nums[j];
                    res[i]=temp; 
                
                }   
            }
            temp=1;
        }
        
        return res;
    }
}

//optimized solution
class Solution {
    public int[] productExceptSelf(int[] nums) {
        //solve it in O(n) and without division
        //constant space complexity
        int len = nums.length;
        int[] left  = new int[len];
        int[] right = new int[len];
        int[] res = new int[len];
        
        left[0]=1;
        right[len-1]=1;
        for(int i=1; i<len; i++){
            left[i]=nums[i-1]*left[i-1];
        }
        for(int j=len-2; j>=0; j--){
            right[j]=nums[j+1]*right[j+1];
        }
        for(int i=0; i<len; i++){
            res[i]=left[i] * right[i];
        }
    
        return res;
    }
}

//best solution
class Solution {
    public int[] productExceptSelf(int[] nums) {
        //solve it in O(n) and without division
        //constant space complexity
        int len = nums.length;
        
        int[] res = new int[len];
        res[0]=1;
        for(int i=1; i<len; i++){
            res[i]=nums[i-1]*res[i-1];
        }
        
        int right = 1;
        
        for(int j=len-1; j>=0; j--){
            res[j]=res[j]*right;
            right=right*nums[j];
        }
     
    
        return res;
    }
}