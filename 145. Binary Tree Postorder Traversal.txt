//dfs
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

     List<Integer> list = new ArrayList<>();

    public List<Integer> postorderTraversal(TreeNode root) {
     
        if(root==null){
            return list;
        }
        dfs(root);
        return list;
        
    }
    
    public void dfs(TreeNode root){
        if(root==null)
            return;
        
        dfs(root.left);
        dfs(root.right);
        list.add(root.val);
    }
}

//iterative solution
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> postorderTraversal(TreeNode root) {
       
        Stack<TreeNode> stack = new Stack<>();
        
        List<Integer> list = new ArrayList<>();
        
        if(root==null){
            return list;
        }
        
        
        stack.push(root);
        
        while(!stack.isEmpty()){
            TreeNode curr = stack.pop();
            list.add(0, curr.val);
            
            if(curr.left!=null)
                stack.push(curr.left);
            if(curr.right!=null)
                stack.push(curr.right);
        }
       
        return list;
        
    }
    
}